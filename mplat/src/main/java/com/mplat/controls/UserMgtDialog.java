/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mplat.controls;

import com.mplat.context.MplatContextHolder;
import com.mplat.controls.ui.UserTableCellRenderer;
import com.mplat.mgt.UserMgt;
import com.mplat.mgt.dto.UserInfoDTO;
import com.mplat.util.UIUtils;
import java.awt.Dialog;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.lang.StringUtils;

/**
 *
 * @author Kitty
 */
public class UserMgtDialog extends javax.swing.JDialog {

    private UserMgt userMgt;
    private JPopupMenu popupMenu;
    private int selectedRowIndex = -1;

    /**
     * Creates new form UserMgtDialog
     */
    public UserMgtDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);

        this.userMgt = MplatContextHolder.findUserMgt();

        initComponents();

        this.initUserTable();

        this.initPopupMenu();
    }

    public void initUserTable() {
        for (int i = 0; i <= 1; i++) {
            this.tableUserInfos.getColumnModel().getColumn(i).setCellRenderer(new UserTableCellRenderer(i));
        }

        DefaultTableModel model = (DefaultTableModel) this.tableUserInfos.getModel();
        int rowCnt = model.getRowCount();
        for (int i = 0; i < rowCnt; i++) {
            model.removeRow(0);
        }

        List<UserInfoDTO> users = this.userMgt.findAll();
        model.setRowCount(users.size());
        // model = new DefaultTableModel(new String[]{"ID", "用户名"}, users.size());
        for (int i = 0; i < users.size(); i++) {
            UserInfoDTO user = users.get(i);
            this.tableUserInfos.setValueAt(user, i, 0);
            this.tableUserInfos.setValueAt(user, i, 1);
        }

        // tableUserInfos.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        // tableUserInfos.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    private void initPopupMenu() {
        this.popupMenu = new JPopupMenu();

        JMenuItem createMenuItem = new JMenuItem("增加用户");
        JMenuItem updateMenuItem = new JMenuItem("修改密码");
        JMenuItem deleteMenuItem = new JMenuItem("删除用户");
        this.popupMenu.add(createMenuItem);
        this.popupMenu.add(updateMenuItem);
        this.popupMenu.add(deleteMenuItem);

        createMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                onCreateMenuItemEvent(evt);
            }
        });

        updateMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                onUpdateMenuItemEvent(evt);
            }
        });

        deleteMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                onDeleteMenuItemEvent(evt);
            }
        });
    }

    private void onCreateMenuItemEvent(ActionEvent evt) {
        Dialog dialog = new UserCreateDialog(this, true);
        UIUtils.center(dialog);
        dialog.setVisible(true);
    }

    private void onUpdateMenuItemEvent(ActionEvent evt) {
        UserInfoDTO user = this.findSelectedUser(evt);
        if (user == null) {
            UIUtils.alert(this, "错误", "用户为空，请选择用户！");
            return;
        }

        Dialog dialog = new UserUpdateDialog(this, true, user);
        UIUtils.center(dialog);
        dialog.setVisible(true);
    }

    private void onDeleteMenuItemEvent(ActionEvent evt) {
        UserInfoDTO user = this.findSelectedUser(evt);
        if (user == null) {
            UIUtils.alert(this, "错误", "用户为空，请选择用户！");
            return;
        }

        boolean rtn = this.userMgt.remove(user.getUsrName());
        if (rtn) {
            UIUtils.info(this, "成功提示", "删除用户成功！");
            this.initUserTable();
        } else {
            UIUtils.alert(this, "失败提示", "删除用户失败，请重新输入！");
        }
    }

    private UserInfoDTO findSelectedUser(ActionEvent evt) {
        if (this.selectedRowIndex < 0) {
            return null;
        }

        Object value = this.tableUserInfos.getModel().getValueAt(this.selectedRowIndex, 0);
        if (value == null || !(value instanceof UserInfoDTO)) {
            return null;
        }

        return (UserInfoDTO) value;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableUserInfos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("用户信息管理");
        setResizable(false);

        tableUserInfos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "用户名"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableUserInfos.setRowHeight(20);
        tableUserInfos.getTableHeader().setReorderingAllowed(false);
        tableUserInfos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                onUserTableMousePressedEvent(evt);
            }
        });
        jScrollPane1.setViewportView(tableUserInfos);
        tableUserInfos.getColumnModel().getColumn(0).setMaxWidth(120);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 405, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onUserTableMousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_onUserTableMousePressedEvent
        if (SwingUtilities.isRightMouseButton(evt)) {
            this.selectedRowIndex = evt.getY() / this.tableUserInfos.getRowHeight();
            this.popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_onUserTableMousePressedEvent
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableUserInfos;
    // End of variables declaration//GEN-END:variables
}
